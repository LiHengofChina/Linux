//=================================== cron 介绍
	//cron 是 linux中的一种服务：周期执行的任务
	//查看命令
	 ps -ef | grep cron
//===================================cron服务相关命令	
	service crond start    //启动服务
	service crond stop     //关闭服务
	service crond restart  //重启服务
	service crond reload   //重新载入配置
	service crond status   //查看服务状态 					 
//===================================   crontab
	cron的配置文件称为"crontab"，是"cron table"的简写。
	
//===================================	crontab配置文件来源
	1)./var/spool/cron 	目录下的文件
				//该目录存放的是每个用户包括root的crontab任务
				//以创建者的名字命名 //一个用户只会有一个该文件
			//==========crontab命令使用
			//	/var/spool/cron下的crontab文件不可以直接创建或者直接修改。
			//	该crontab文件是通过crontab命令创建的
		
		
	2).	/etc/crontab	
				//系统管理员制定的维护系统
				//以及其他任务的crontab
				//注意这是个文件，但实际操作中，我没有发现该文件
				//只发现发下目录，
		01 * * * * root run-parts /etc/cron.hourly	
						//每个小时的01分，
						//系统会以root身份去/etc/cron.hourly
						//这个目录下执行所有可执行的文件！
		02 4 * * * root run-parts /etc/cron.daily		
						//每天4点02分的时候。。。
		22 4 * * 0 root run-parts /etc/cron.weekly
						//每周。。。？？
		42 4 1 * * root run-parts /etc/cron.monthly
						//每月1号4点42分的时候。。。
		//注意是这些目录下的可执行文件
		run-parts 去掉的话， 后面就只能跟文件
		
		
 			
	3). /etc/cron.d/	
			存放任何要执行的crontab文件或脚本。
		//======创建cron脚本
		1)创建   test.cron 脚本.内容如下：
			15,30,45,59 * * * * echo "xgmtest....." >> xgmtest.txt
			//每隔15分钟，执行打印一次命令
		2).将脚本添加进执行列表：
			crontab crontest.cron
		3).	crontab -l
			查看定时任务是否成功
			//或者检测/var/spool/cron下是否生成对应cron脚本
		//注意：这操作是直接替换该用户下的crontab，而不是新增
		
//=================================== 	crontab 命令权限问题
	crontab的使用权限问题
	
	1).查看这两个文件是否存在	
		/var/adm/cron/cron.allow 
		/var/adm/cron/cron.deny
	2).情况分析：
		1).两个文件都不存在，仅root 能用 crontab 命令。 
		2).cron.allow存在,但cron.deny不存在, 列在cron.allow  的用户能使用
		3).cron.allow不存在, cron.deny存在,除列在cron.allow 的用户能用		 
		4).两个文件都存在，以cron.allow为准


//===================================格式:
和之前的cron表达式相比，去掉了秒和年
minute hour day-of-month month-of-year day-of-week 

//===================================	例子大集合：

1).每天早上6点 
	0 6 * * * echo "Good morning." >> /tmp/test.txt 
2).每两个小时 	
	0 */2 * * *  echo "Have a break now." >> /tmp/test.txt  
3).晚上11点到早上8点之间每两个小时和早上八点 
	0 23-7/2,8 * * * echo "Have a good dream" >> /tmp/test.txt
4).每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 
	0 11 4 * 1-3 command line
5).1月1日早上4点 
	0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root 
6).每小时执行/etc/cron.hourly内的脚本
	01 * * * * root run-parts /etc/cron.hourly	
7).每天的下午4点、5点、6点
	的5 min、15 min、25 min、35 min、45 min、55 min时
	执行命令。 
	5,15,25,35,45,55 16,17,18 * * * command
8).每周一，三，五的下午3：00系统进入维护状态，重新启动系统。
	00 15 * * 1,3,5 shutdown -r +5


9).每小时的10分，40分执行用户目录下的innd/bbslin这个指令： 
	10,40 * * * * innd/bbslink 
	
10).每小时的1分执行用户目录下的bin/account这个指令： 
	1 * * * * bin/account

每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： 
20 3 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）　　

每年的一月和四月，4号到9号的3点12分和3点55分执行/bin/rm -f expire.1st这个指令，并把结果添加在mm.txt这个文件之后（mm.txt文件位于用户自己的目录位置）。 
12,55 3 4-9 1,4 * /bin/rm -f expire.1st$#@62;$#@62;mm.txt 








			
							 
							 