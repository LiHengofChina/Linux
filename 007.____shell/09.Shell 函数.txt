 
//=========================================函数
//=========================================函数
//=========================================函数
 
 linux shell 可以用户定义函数，
 然后在shell脚本中可以随便调用。
	
	//===================格式:
	shell中函数的定义格式如下：
	[ function ] funname [()]
	{
		action;

		[return int;]
	}
	//===================说明:
	(1).function 关键字可以省略
	(2).参数返回，可以显示加：return 返回
		如果不加，将以最后一条命令运行结果，作为返回值。
		return后跟数值n(0-255下面的例子定义了一个函数并进行调用：
	(3).函数调用直接用名字， 不用加()
	(4).函数返回值在调用该函数后通过 $? 来获得。
	(5).函数定义必须放在脚本前面，因为shell是从上往下解析
	//====================示例1：
	demoFun(){
		echo "这是我的第一个 shell 函数!"
	}
	demoFun
	//====================示例2：
	funWithReturn(){
		echo "这个函数会对输入的两个数字进行相加运算..."
		echo "输入第一个数字: "
		read aNum
		echo "输入第二个数字: "
		read anotherNum
		echo "两个数字分别为 $aNum 和 $anotherNum !"
		return $(($aNum+$anotherNum))
	}
	funWithReturn
	echo "输入的两个数字之和为 $? !"
 
//=========================================函数参数 
//=========================================函数参数 
//=========================================函数参数 
	1).在函数内部通过 $n 的形式来获取参数的值
		$1表示第一个参数，$2表示第二个参数...
	2).注意，$10 不能获取第十个参数，
		获取第十个参数需要${10}。
		当n>=10时，需要使用${n}来获取参数。
	3).函数调用时，
		多个参数以空格分开。
		
	//===============================示例：
	
	funWithParam(){
		echo "第一个参数为 $1 !"
		echo "第二个参数为 $2 !"
		echo "第十个参数为 $10 !"
		echo "第十个参数为 ${10} !"
		echo "第十一个参数为 ${11} !"
		echo "参数总数有 $# 个!"
		echo "作为一个字符串输出所有参数 $* !"
	}
	funWithParam 1 2 3 4 5 6 7 8 9 34 73

		
 
 
 
 
 
 
 
 