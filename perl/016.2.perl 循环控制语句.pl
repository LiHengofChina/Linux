#!/usr/bin/perl

#循环控制语句改变了代码的执行顺序，通过它你可以实现代码的跳转。

print("\n_________________________________next 语句__________________________________________________\n");

#语法
#next [ LABEL ];
#其中 LABEL 是可选的，如果没有指定 LABEL，next 语句将返回到循环体的起始处开始执行下一次循环。
## PS: 这个就相当于java中的continue;

$a = 10;
while( $a < 20 ){
   if( $a == 15)
   {
       # 跳出迭代
       $a = $a + 1;
       next;
   }
   print "a 的值为: $a\n";
   $a = $a + 1;
}


print("\n_________________________________last 语句__________________________________________________\n");
# last 语句用于退出循环语句块，从而结束循环，last语句之后的语句不再执行，"continue语句块" 也不再执行。
## PS: 这个就相当于java中的break;

$a = 10;
while( $a < 20 ){
   if( $a == 15)
   {
       # 退出循环
       $a = $a + 1;
       last;
   }
   print "a 的值为: $a\n";
   $a = $a + 1;
}

print("\n_________________________________continue  语句__________________________________________________\n");
#continue 块通常在条件语句再次判断前执行，可用在 while 和 foreach 循环中。
# 有点像java中的 for 循环中的第三部分条件。

#示例一：
$a = 0;
while($a < 3){
   print "a = $a\n";
}continue{
   $a = $a + 1;
}

#示例二：
@list = (1, 2, 3, 4, 5);
foreach $a (@list){
   print "a = $a\n";
}continue{
   last if $a == 4;
}


print("\n_________________________________redo 语句__________________________________________________\n");
#redo 语句直接转到循环体的第一行开始重复执行本次循环，redo语句之后的语句不再执行，continue语句块也不再执行。
$a = 0;
while($a < 10){
   if( $a == 5 ){
      $a = $a + 1;
      redo;
   }
   print "a = $a\n";
}continue{
   $a = $a + 1;
}

print("\n_________________________________无限循环__________________________________________________\n");


for( ; ; )
{
   printf "循环会无限执行。\n";
}



