#!/usr/bin/perl

=pod

总结：eval 就是 try{} 和 eval的结合体。

https://blog.csdn.net/u014703817/article/details/32702957


	eval 关键字在 Perl里起 "两种不同的作用"，但它们相关。
	用 "两种语法形式" 来表现的
		1). eval BLOCK
			第一种形式捕获那些致命的运行时例外（错误），
			//类似于 C++ 或 Java 里的 "try 块"。
			//eval BLOCK 形式是在编译时做语法检查的，所以它的效率相当高
			// 因为在 BLOCK 里的代码是和周围的代码同时编译的，
			// 所以这种形式的 eval 不能捕获语法错误。
			// 它能捕获运行时错误，而不是语法错误。
			//在 BLOCK 里的代码必须是合法的 Perl 代码，这样它才能通过编译阶段。
			//eval BLOCK 的块并不是循环，所以 next，last，或 redo 这样的循环控制语句并不能用于离开或者重启该块。
			
		2). eval EXPR
			第二种形式在运行时实时地编译和执行一小段代码，
			并且也和第一种形式一样捕获任何例外。
			//eval EXPR 形式可以捕获语法错误是因为它在运行时分析代码。
			//如果分析失败，它象平常一样在 $@ 里放分析错误。
			//另外，它把 EXPR 的值当作一小段 Perl 程序执行。
			//这就意味着它可以从包围的范围里看到任何词汇闭合域，
			//并且在 eval 完成之后，任何非局部变量设置仍然有效，就象子过程调用或者格式定义一样。
			
			eval 的代码是当作一个块看待的，
			所以任何在 eval 里定义的局部范围的变量都只能持续到 eval 结束。
			（参阅 my 和 local。）和任何块里的代码一样，最后的分号不是必须的。
			//在 EXPR 里的代码直到运行时才检查，所以要到运行时它才导致错误的发生。
			
	但是第二种形式比第一种形式运行的速度慢很多，因为它每次都要分析该字串。
	另外，它也更通用。不管你在那里使用，eval 都是一个在 Perl 里做全部例外处理的好地方。
	
	###################=============================================================
	1). 两种形式的 eval 所返回的值都是它计算的最后一个表达式的值，这一点和子过程一样。
	2). 你可以用 return 操作符从 eval 的中间返回一个数值。
		提供返回值的表达式是在空，标量，或者列表环境中计算的，具体哪种环境是由 eval 本身所处的环境决定的。
	
	###################=============================================================
	如果有一个可捕获的错误存在（包括任何由 die 操作符生成的）， eval 返回 undef 并且把错误信息放到 $@ 里。
	
	如果没有错误，Perl 保证把 $@ 设置为空字串，所以你稍后可以很可靠地做错误检查。一个简单的布尔测试就足够了：
	  eval { ... };      # 捕获运行时错误
	  if ($@) { ... }   # 处理错误
	
	###################=============================================================
		1). eval BLOCK
				    eval { $answer = };     
		2). eval EXPR
					eval '$answer =';   
			
		 eval BLOCK 是在编译时做语法检查的，所以任何语法错误都提前报告。
		 因此，如果你的代码不会变化，并且 eval EXPR 和 eval BLOCK 都完全符合你的要求，那么 BLOCK 形式好一些。
		//就是说要使用 eval { }  这种更好些。
		
		
		 
	
	
=cut


print "\n______________________________________________________\n";

print "\nEnter some Perl code: ";

while () {
	  eval;
	  print $@;
	  print "\nEnter some more Perl code: ";
}

	












