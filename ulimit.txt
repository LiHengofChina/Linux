
//======================================== 概念
//======================================== 概念

Linux ulimit命令用于控制shell程序的资源。

//======================================== 详细参数
//======================================== 详细参数

ulimit -a 　//显示目前资源限制的设定。
//

-a 　显示目前资源限制的设定。
-c   <core文件上限> 　	设定core文件的最大值，单位为区块。
-d 	 <数据节区大小> 　	程序数据节区的最大值，单位为KB。
-f   <文件大小> 　		shell所能建立的最大文件，单位为区块。
-H 　设定资源的硬性限制，也就是管理员所设下的限制。
-m   <内存大小> 　		指定可使用内存的上限，单位为KB。
-n   <文件数目> 　		指定同一时间最多可开启的文件数。
-p   <缓冲区大小> 　	指定管道缓冲区的大小，单位512字节。
-s   <堆叠大小> 　		指定堆叠的上限，单位为KB。
-S 　设定资源的弹性限制。
-t   <CPU时间> 　		指定CPU使用时间的上限，单位为秒。
-u   <程序数目> 　		用户最多可开启的程序数目。
-v   <虚拟内存大小> 　	指定可使用的虚拟内存上限，单位为KB。
 
//==============================配置文件
//==============================配置文件
	1).文件位置
		/etc/security/limits.conf

	2).配置格式
			username|@groupname		type	resource		value


			/**
				username|@groupname	
							//用户名或用户组，
							//组前面要加@，
							//可使用通配符
				type：可选	 
							// soft hard -
							// soft 当前系统生效的设置值
							// hard 表示系统中所能设定的最大值	//soft 限制不能与 hard高
							// - 表示同时设置 soft与hard值
				resource：
							core 限制内核文件大小
							nofile 打开文件的最大数目
							noproc 进程的最大数目
							//=======
							date 最大数据大小
							fsize 最大文件大小
							memlock 最大锁定内存地址空间
							rss 最大执行设置大小
							stack 最大栈大小
							cpu 以分钟为单位的cpu时间
							as  地址空间限制
							maxlogins 此用户允许登陆的最大数目
							
				value:	 所设定的值
			*/
		 2).示例：
				* 	  soft  nproc 	16384
				* 	  hard  nproc 	16384
				root  soft  nofile  65536
				root  hard  nofile  65536
//============================== 设置方式1
//============================== 设置方式1
使用：
ulimit -n 1024 设置最大描述符	 
所有限制都可以使用这种方式进行设置，
不过，只对当前会议有用，而有要使用root，
//用户退出之后这个配置便无效了



//============================== 设置方式2
//============================== 设置方式2
修改 
	/etc/security/limits.conf 
	root  soft  nofile  2048
	root  hard  nofile  2048
	
之后，立刻生效，退出用户重新连接，但可以看到效果
// PS:用户重新进入才能查看到修改的结果 



//================================================================================================================================================ 常见错误：too many open files
//================================================================================================================================================ 常见错误：too many open files
	   -n 配置，以进程为单位，一个进程能打开多少个句柄
		files不单是文件的意思， 也包括打开的通讯链接(比如socket)， 正在监听的端口等等

		常见错误：文件句柄超出限制，日志报错 too many open files
		ulimit -n {值}  //加大这个值
		/**	相关配置
		* soft nofile 500000
		* hard nofile 500000
		*/

		
		0). 查看某个进程启动的时候指定的文件句柄
			16352 为进程PID
			cat /proc/16352/limits
		
		1). 查看用户的 配额 ，相当于查看 /etc/security/limits.conf 里面配置的值 
			ulimit -a | grep "open files"
		2). 查看已产生的句柄，以进程为单位
			lsof -n|awk '{print $2}'|sort|uniq -c|sort -nr|more
		  //第一列是打开的句柄数，第二列是进程ID
	
	
	
//================================================================================================================================================ 常见错误：fork: retry: Resource temporaril	
//================================================================================================================================================ 常见错误：fork: retry: Resource temporaril	

		//常见错误：fork: retry: Resource temporaril
		本质是linux系统无法创建更多进程导致，
		因此需要修改linux最大进程数
	 
		进程数
		不仅包含该用户创建的进程，还包含子进程、线程等
		
		ulimit -a | grep "max user processes"	//允许用户创建的最大进程数
	 
		ps -efT | wc -l		//所有用户加起来的进程数
		
		/**	相关配置
		* soft nproc 4096
		* hard nproc 4096
		*/
	
//================================================================================================================================================
//================================================================================================================================================

		core文件
		它其实就是内存的映像，当程序崩溃时，存储内存的相应信息
		主用用于对程序进行调试。当程序崩溃时便会产生core dump 文件
		默认生成位置与可执行程序位于同一目录下，文件名为core.***，其中***是某一数字。
		// 进行崩溃后的堆栈打印
		//0 表示不打印在
		/**	相关配置
		* soft core 0
		* hard core 0
		*/
	
	
	
	
	
	