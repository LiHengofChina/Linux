 
//=========================================流程控制
//=========================================流程控制
	注意：
		sh流程控制不可以为空
//========================================= if 语句语法格式：
//========================================= if 语句语法格式：
	if condition
	then
		command1 
		command2
		...
		commandN 
	fi
	//=====示例：
	if [ $(ps -ef | grep -c "ssh") -gt 1 ]; 	//在中括号中运算
		then 
		echo "true"; 
	fi	
//========================================= if else 语句语法格式：
//========================================= if else 语句语法格式：		 	 
	if condition
	then
		command1 
		command2
		...
		commandN
	else
		command
	fi	 
	//=====示例：
	
	num1=$[2*3]
	num2=$[1+5]
	if test $[num1] -eq $[num2]
	then
		echo '两个数字相等!'
	else
		echo '两个数字不相等!'
	fi
	
//========================================= if else-if else 语句语法格式：	
//========================================= if else-if else 语句语法格式：	
	if condition1
	then
		command1
	elif condition2 
	then 
		command2
	else
		commandN
	fi	
	//=示例：
	a=10
	b=20
	if [ $a == $b ]
	then
	   echo "a 等于 b"
	elif [ $a -gt $b ]
	then
	   echo "a 大于 b"
	elif [ $a -lt $b ]
	then
	   echo "a 小于 b"
	else
	   echo "没有符合的条件"
	fi	
//=========================================	for 循环
//=========================================	for 循环
	for var in item1 item2 ... itemN
	do
		command1
		command2	//命令可为任何有效的shell命令和语句
		...
		commandN
	done
	//=====示例：
	for loop in 1 2 3 4 5
	do
		echo "The value is: $loop"
	done
	//=====示例2：	
	for str in 'This is a string'
	do
		echo $str
	done	
//=========================================while 语句
//=========================================while 语句
	//while循环用于不断执行一系列命令
	//也用于从输入文件中读取数据
	//=====格式
	while condition
	do
		command
	done
	//=====示例1
	int=1
	while(( $int<=5 ))	//为什么两层引号
	do
		echo $int
		let "int++"	// let 用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量
	done
	
	//=====示例2：读取键盘输入
	echo '按下 <CTRL-D> 退出'
	echo -n '输入你最喜欢的网站名: '
	while read FILM
	do
		echo "是的！$FILM 是一个好网站"
	done	
	//=====示例3：无限循环
				无限循环语法格式：

				while :
				do
					command
				done
				或者

				while true
				do
					command
				done
				或者

				for (( ; ; ))
//=========================================until 循环
//=========================================until 循环
//=========================================until 循环
until循环执行一系列命令直至条件为真时停止。
until循环与while循环在处理方式上刚好相反。


		//====格式：
		until condition
		do
			command
		done
		//====示例：	
		int=1	
		until(( $int>5 ))
		do
		   echo $int
		   let "int++"
		done
//=========================================case	
//=========================================case	
//=========================================case	
	Shell case语句为多选择语句。
	可以用case语句匹配一个值与一个模式，
	如果匹配成功，执行相匹配的命令
	
	
	//===格式
	case 值 in			//取值后面必须为单词in	//取值可以为变量或常数
	模式1)				//每一模式必须以右括号结束
		command1
		command2
		...
		commandN
		;;				//其间所有命令开始执行直至 ;;。
	模式2）				//注意是右圆括号
		command1
		command2
		...
		commandN
		;;
	esac	
	//=================
	一旦模式匹配，
	则执行完匹配模式相应命令后不再继续其他模式。
	如果无一匹配模式，
	使用星号 * 捕获该值，再执行后面的命令。
	//=================示例：
	echo '输入 1 到 4 之间的数字:'
	echo '你输入的数字为:'
	read aNum
	case $aNum in
		1)  echo '你选择了 1'
		;;
		2)  echo '你选择了 2'
		;;
		3)  echo '你选择了 3'
		;;
		4)  echo '你选择了 4'
		;;
		*)  echo '你没有输入 1 到 4 之间的数字'
		;;
	esac
	
//=========================================	break命令
//=========================================	break命令
//=========================================	break命令
		break命令
		break命令允许跳出所有循环（终止执行后面的所有循环）。

	示例：
	while :
	do
		echo -n "输入 1 到 5 之间的数字:"
		read aNum
		case $aNum in
			1|2|3|4|5) echo "你输入的数字为 $aNum!"
			;;
			*) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"
				break
			;;
		esac
	done	
	
//=========================================	continue
	它不会跳出所有循环，仅仅跳出当前循环。
	
	
	
	