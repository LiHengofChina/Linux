
<#
.SYNOPSIS
    检查是否有可用的 Windows 安全补丁，并以“code|message”格式返回

.DESCRIPTION
    1. 禁用确认提示
    2. 安装 PSWindowsUpdate 模块（如未安装）
    3. 列出并检测可用安全补丁
    4. 输出格式：0|""（无补丁） 或 1|"…补丁列表…"

.PARAMETER None
    无需参数

.EXAMPLE
    PS C:\> .\check-security-patch.ps1
#>

//==========================================（1）注释 和 帮助块
//==========================================（1）注释 和 帮助块

（1）<# ... #> 是 PowerShell 的块注释（block comment）语法，也常用来编写“注释式帮助”
（1）任何以 .<KEYWORD> 开头的行都属于帮助块





在 PowerShell 中，单引号 ('…') 和双引号 ("…"）都能定义字符串，但行为略有不同：

单引号 '…'	不展开

双引号 "…"	会展开
//==========================================（2） 转义/续行字符
//==========================================（2） 转义/续行字符

（1）转义：
		"1|`"安装模块失败: $($_.Exception.Message)`""                    												`
		
（1）换行：

		Get-ChildItem `
		  -Path C:\Windows `
		  -Recurse
//==========================================（3）取变量 
//==========================================（3）取变量 

$city

//==========================================（3）当前对象 $_  
//==========================================（3）当前对象 $_  
$_

在 PowerShell 的管道或脚本块（{ … }）里，$_ 就相当于当前处理的那个对象


//有点像 Java 中方法里用 this 表示“当前实例”

//==========================================（4）子表达式运算符
//==========================================（4）子表达式运算符
$(…)

它的作用是在更大的表达式或字符串中先执行括号内的表达式，
然后将结果当作一个整体插入到外层。
普通的圆括号 (...) 只是改变运算优先级，只能包含单个表达式；

$(...) 返回一个标量或数组，取决于括号内语句的输出；
@(...) 强制把任何输出都“包装”为一个 [object[]] 数组。


