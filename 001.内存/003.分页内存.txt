	"虚拟内存地址"和"物理内存地址"的分离，给进程带来便利性和安全性。
	但虚拟内存地址和物理内存地址的翻译，又会额外耗费计算机资源。
	在多任务的现代计算机中，虚拟内存地址已经成为必备的设计。
	那么，操作系统必须要考虑清楚，如何能高效地翻译虚拟内存地址。

//===============================================================================
//===============================================================================
	
	
	记录"对应关系"最简单的办法，就是把对应关系记录在一张表中。
	为了让翻译速度足够地快，这个表必须加载在内存中。
	不过，这种记录方式惊人地浪费。
	/**

		如果1GB物理内存的每个字节都有一个对应记录的话，
		那么光是对应关系就要远远超过内存的空间。由于对应关系的条目众多，
		搜索到一个对应关系所需的时间也很长。
		这样的话，会让系统陷入瘫痪。
	*/
	//================== 分页
	//================== 分页
	因此，Linux采用了分页（paging）的方式来记录对应关系。
	所谓的分页，就是以"更大尺寸的单位页（page）"来管理内存。
	在Linux中，通常每页大小为4KB。
	/**
		如果想要获取系统当前的"内存页大小"，可以使用命令：	
			getconf PAGE_SIZE
			返回的4096代表每个内存页可以存放4096个字节，即4KB。
			Linux把 "物理内存" 和 "进程空间" 都分割成页。
			
	*/
	//==================
	//==================
	把"物理内存"和"进程空间"的地址"都分成页"，
	内核只需要记录页的对应关系，
	相关的工作量就会大为减少。
	/**
		由于每页的大小是每个字节的4000倍。
		因此，内存中的总页数只是总字节数的四千分之一。
		对应关系也缩减为原始策略的四千分之一。
		分页让虚拟内存地址的设计有了实现的可能。
	*/
	

	//==================
	//==================
	无论是"虚拟页"，还是"物理页"，
	一页之内的"地址都是连续"的。
	
	这样的话，一个虚拟页和一个物理页对应起来，
	"页内的数据"就可以按顺序一一对应。
	
		"虚拟内存地址"和"物理内存地址"的"末尾部分"应该"完全相同"。
	/**
		大多数情况下，每一页有4096个字节。
		由于4096是2的12次方，所以地址最后12位的对应关系天然成立。
				//PS:是指    虚拟内存地址的"偏移量" 与 物理内存地址的"偏移量" 两者相等
		我们把地址的这一部分称为"偏移量（offset）"。
		偏移量实际上表达了 "该字节" 在页内的位置。
		地址的 "前一部分" 则是 "页编号" 。
  
		操作系统只需要记录 "页编号" 的对应关系。
				//PS:是指    虚拟内存地址的"页编号" 与 物理内存地址的"页编号"
				//PS:两种 "页编号" 之前的一种对应关系
	*/
	
//============================================ 地址翻译过程	 
//============================================ 地址翻译过程
	以"页"为单位来管理内存之后的"地址翻译过程"，见图：
	
	示例：	从"虚拟地址" ====到===> "物理地址"的翻译过程。	
	
		第一步： 虚拟内存地址为：0x0001a011
			 此时"虚拟内存"地址已使用"页"为单位进行管理。	
			 它分为两部分，前面部分是"页编号"，后面部分是"偏移量"。

			 //其中页编号为：0x 0001a
			 //其中页偏移量：0x 011
			 //各自表示的时候分别加上0x表示它们是16进制数，
			 			 
			 
		第二步： 对应关系
			 //前面说过， 操作系统只需要记录 "页编号" 的对应关系。
			 
			 虚拟地址的"页编号"  	0x 0001a
			 物理地址的"页编号"		0x 00006
			 
			 //这里说 虚拟地址的页编号 0x 0001a 指向了 物理地址的页编号0x 00006
			 
				
		第三步： 此时"物理内存"地址也使用"页"为单位进行管理。
				有了"页编号" 的对应关系，
				而"偏移量" 的对应关系天然成立
				那么得到物理地址就为
					"页编号"   +   "偏移理"
					0x 00006		0x 011
				转换一下写法就是：
							0x00006011 ，这也就是它的物理地址
		第四步：最后结论就是：
				对 虚拟地址0x0001a011 的操作将变成，对物理地址0x00006011的操作。
				
		 
