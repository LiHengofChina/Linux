//=============== 以tomcat为例：

1). tomcat配置 https 的时候，首先要准备好证书

2). abcConsole.keystore 是证书库，里面可放置公钥和私钥
	这个证书库配置在server.xml时时候，
	可以指定"证书库路径和证书库密码"
			keystoreFile="conf/keystore/abcConsole.keystore"
			keystorePass=""				
 
3). tomcat  这里配置的时候是可以双向配置的，还是单向的

	1). tomcat是否 相信其它任何地方来的链接 是安全的
		
		clientAuth="true" 如果设为true，
		表示Tomcat要求所有的SSL客户出示安全证书，对SSL客户进行身份验证
 
	2). 
		tomcat发送的请求是否被其它任何地方相信是安全的
			//这个就由浏览器认定


4).TOMCAT作为服务器，在启动的时候，
		会去读取keyStore中的Key
		//================
		server.xml 会配置  
		keystoreFile="conf/keystore/abcConsole.keystore"
			其中的内容分两类
			1).一类是  keymanage  // 私钥 和服务证书
				将私钥(购买的私钥) 和 服务证书(购买的公钥)  导入这里  
				//用于验证别人的，也就是私钥和我们的公钥
				//当别人向tomcat发送请求的时候，
				//tomcat收到了这个公钥，和自身的私钥进行解密，
				//解密成功则表示连接是安装的

			2).二类是 trustmange // 根证书 和 二级证书		
				将 根证书(购买的公钥) 和 二级证书(购买的公钥)，			
				都是公钥导入这里面
				//里面全是公钥，用于解密，它发送给客户端
				//和客户端的私钥进行解密，才能建立安全链接
				
 							
5). 三次握手
		
		Client   -------------> Server // 第一次，客户端发送 HELLO 给服务器
		
		Client   <------------- Server // 第二次返回 "服务证书"或者"二级证书"或者"根证书"
									   // 说明："服务端"会把这个证书发送给"客户端"

	当客户端拿到这个证书后	
	在浏览器的证书库进行比对
	//浏览器会有很多预埋的证书		
			如果此时证书是信任的证书，则为安全链接，并在浏览器上打上安全标示，
			如果此时是非信任的证书，则提示用户是否继续连接，如果连接，则也临时建立连接， 但打上非安全的标识

			Client   -------------> Server 成功  //第三次 浏览器发送信息，连接建立成功

			
	//
	此时手动将证书("服务证书"或者"二级证书"或者"根证书")导入到浏览器，
	在建立连接时候，浏览器 也会认为 服务器 是安全的，
	也会提示用户这个连接是安全的。
	这相当于"预埋" 埋的是私钥？？？
	//============
	这个错误显示在浏览器上面，
	说明是 Client (这里指浏览器)在提示用户，链接安全与否

	这个就是 " Client 对 Server 的相信"



	
