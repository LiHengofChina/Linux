https://bbs.huaweicloud.com/blogs/100530?ticket=ST-1397311-EmFH63KggUJMWKUm9PmdTKpt-sso



//==================================================================================Token 鉴权
//==================================================================================Token 鉴权
	 
	1). 获取token
		
		从公证处获取token
		client    ===================>    公证处


	2). Client 访问  Server
		Client    ===================>    公证处
				// Token + 信息

				
	3). Server  去公证处 鉴权
		Client    ===================>    公证处


	//原理：任何请求，都附带token，接收者根据token判断请求是否合法

	//因为有token的加持，所以可以防止非法请求。
	//另外，token是有有效期的限制的。

	缺点：如果报文在中途被劫持，那么token就泄露了，
		  这时（token有效期内）黑客就可以构造任意的请求了。
		  可以看出来，还是不那么的安全。

 
//==================================================================================AK/SK 鉴权
//==================================================================================AK/SK 鉴权

AK 		= 	AccessKey  			= 	Access Key Id（AK）			= 用户名
SK 		= 	SecretAccesKey  	= 	Secret Access Key（SK） 	= 密码

//SK 本般一般也会加密保存
	
重要：
	AK和SK成对出现
	客户端和服务端都保存一对相同的AK/和SK
	
//================流程

1). Client
	SK + 信息  ==> 包裹
	//包裹就是：加密的后信息，带锁的信息，
	//SK是钥匙，SK能打开这把锁
	

2). 发送请求
		AK + 包裹
	//发送的内容是 AK 和包裹，
	//注意，并没有带上SK

3). 服务端
	//服务端根据 AK 获取到存在服务端的SK
	
4). 服务端打开包裹
	//服务端使用 SK打开这个加密的包裹
	

	原理：
		把信息放到一个箱子里，然后贴个信物。
		中间不管什么被动了手脚，都会被发现。
	//这比token认证的方式安全很多
	
//=======================另外：
1). 由于客户端也要存一份AK/SK，
	所以很多地方可以看到下载AK/SK的页面

2).  AK作为用户名的别称，是支持修改的


总结：
	使用user/paaswd的方式，对于用户登录时界面操作还行。
	但是对于程序直接使用API调用场景，就不安全了。
	所以一般的云平台，例如google，aws都提供对AK/SK方式的支持。
	 

