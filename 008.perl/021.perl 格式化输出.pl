#!/usr/bin/perl
print("\n_________________________________格式化输出00__________________________________________________\n");
=pod
	Perl 是一个非常强大的文本数据处理语言。
	Perl 中可以使用 format 来定义一个模板，
	然后使用 write 按指定模板输出数据。
			//注意 write 不是格式的一部分，而是用来输出的

格式：
		format FormatName =
		fieldline
		value_one, value_two, value_three
		fieldline
		value_one, value_two
		.

		格式化输出

		
说明：
		fieldline ：一个格式行，用来定义一个输出行的格式
				1).格式行以 @ 或者 ^ 开头，这些行不作任何形式的变量代换。
						// 不要同数组符号 @ 相混淆
						// ^ 用于字段用于多行文本块填充。
				2). 后面是 < >  | ，它们的长度决定了字段的长度，//要包括开头符号的长度。
						// 如果变量超出定义的长度,那么它将被截断。
						// 它们分别表示、左对齐、右对齐、居中对齐。
				
		value_one,value_two…… ：数据行，用来向前面的格式行中插入值,都是perl的变量。
		. ：结束符号。

=cut
print("\n_________________________________格式化输出01__________________________________________________\n");

#示例一：
$text = "google runoob taobao";
format STDOUT =
first: ^<<<<<
    $text
second: ^<<<<<
    $text
third: ^<<<<
    $text  
.

write

print("\n_________________________________格式化输出02__________________________________________________\n");

=pod
	 
		格式		值域含义
		@<<<		左对齐输出
		@>>>		右对齐输出
		@|||		中对齐输出
		@##.##  	固定精度数字  
		@*			多行文本

说明：	
		1). 每个值域的第一个字符是行填充符，当使用@字符时，不做文本格式化。
		2). 除了多行值域@*，域宽都等于其指定的包含字符@在内的字符个数 
		
=cut

print("\n_________________________________格式化输出03__________________________________________________\n");

=pod
	 
		@###.##
		表示 7个字符宽度
		
		小数点前4位
		中间是小数点
		小数点后两位
		如：1234.56
=cut
print("\n_________________________________格式化输出04__________________________________________________\n");
#示例二：

#定义输出格式
format EMPLOYEE =
===================================
@<<<<<<<<<<<<<<<<<<<<<< @<< 
	$name, $age
@#####.##
	$salary
===================================
.


$~ = EMPLOYEE; #指定默认文件变量下所使用的格式，就是让的一个write使用 EMPLOYEE作为格式
 
@n = ("Ali", "Runoob", "Jaffer", "liheng"); 		#创建3个数组 姓名 
@a = (20,30, 40,32);								#创建3个数组 年龄
@s = (2000.00, 2500.00, 4000.000,4500.123);			#创建3个数组 工资
 
$i = 0;
foreach (@n){ #循环的是姓名数组
	
    $name = $_; # $_ 表示形参
				
				#另外两个数组没有传入参数，所以通过i来定位
    $age = $a[$i];
    $salary = $s[$i++];
    write;
}



print("\n_____________\$~ (\$FORMAT_NAME) ：格式名字 ____________________设置：默认文件变量 所使用的格式__________________________________________________\n"); 


$~ = "MYFORMAT"; # 指定默认文件变量下所使用的格式
write;           # 输出 $~ 所指定的格式

#格式写在下面，说明先加载整个文件，再加载的变量
format MYFORMAT = # 定义格式 MYFORMAT 
=================================
      Text # 李恒的教程
=================================
.
write;
 

print("\n____________\$~ (\$FORMAT_NAME) ：格式名字 _____________________设置：不设置 __________________________________________________\n"); 

=pod
	1).  #  不指定$~的情况下会寻找名为STDOUT的格式
	2).  ~  用~号指定的文字不会被输出
=cut

$~ = STDOUT; #由于多个例子写在一起，所以这进而手动指定。
write;         

format STDOUT =
~用~号指定的文字不会被输出
----------------
  STDOUT格式
----------------
.

 

 